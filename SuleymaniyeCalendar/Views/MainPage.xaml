<?xml version="1.0" encoding="utf-8" ?>
<ContentPage
    x:Class="SuleymaniyeCalendar.Views.MainPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:localization="clr-namespace:LocalizationResourceManager.Maui;assembly=LocalizationResourceManager.Maui"
    xmlns:models="clr-namespace:SuleymaniyeCalendar.Models"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    xmlns:viewModels="clr-namespace:SuleymaniyeCalendar.ViewModels"
    x:Name="MainPageRoot"
    Title="{Binding Title}"
    x:DataType="viewModels:MainViewModel"
    FlowDirection="{DynamicResource FlowDirection}"
    BackgroundColor="{AppThemeBinding Light={StaticResource AppBackgroundColor}, Dark={StaticResource AppBackgroundColorDark}}">

    <Shell.TitleView>
        <Grid Margin="10" x:DataType="viewModels:MainViewModel" HeightRequest="40"
              ColumnDefinitions="*,Auto,Auto" ColumnSpacing="8">
            <Label Grid.Column="0"
                   AutomationProperties.IsInAccessibleTree="True"
                   FontAttributes="Bold"
                   FontSize="{DynamicResource HeaderFontSize}"
                   SemanticProperties.Description="{localization:Translate Takvim}"
                   SemanticProperties.HeadingLevel="Level1"
                   Style="{StaticResource LabelSectionHeader}"
                   Text="{localization:Translate PageTitle}"
                   VerticalTextAlignment="Start" />
            <Image Grid.Column="1"
                   x:DataType="viewModels:MainViewModel"
                   Margin="10,0,12,0"
                   AutomationProperties.IsInAccessibleTree="True"
                   VerticalOptions="Center"
                   SemanticProperties.Description="{localization:Translate UygulamaAyarlari}">
                <Image.Source>
                    <FontImageSource
                        FontAutoScalingEnabled="True"
                        FontFamily="{StaticResource IconFontFamily}"
                        Glyph="&#xf013;"
                        Size="{DynamicResource IconLargeFontSize}"
                        Color="{AppThemeBinding Light=White, Dark={StaticResource OnSurfaceColorDark}}" />
                </Image.Source>
                <Image.GestureRecognizers>
                    <TapGestureRecognizer x:DataType="viewModels:MainViewModel" Command="{Binding SettingsCommand}" NumberOfTapsRequired="1" />
                </Image.GestureRecognizers>
            </Image>
            <Image Grid.Column="2"
                   x:DataType="viewModels:MainViewModel"
                   Margin="10,0,20,0"
                   AutomationProperties.IsInAccessibleTree="True"
                   VerticalOptions="Center"
                   SemanticProperties.Description="{localization:Translate Yenile}">
                <Image.Source>
                    <FontImageSource
                        FontFamily="{StaticResource IconFontFamily}"
                        Glyph="&#xf2f1;"
                        Size="{DynamicResource IconLargeFontSize}"
                        Color="{AppThemeBinding Light=White, Dark={StaticResource OnSurfaceColorDark}}" />
                </Image.Source>
                <Image.GestureRecognizers>
                    <TapGestureRecognizer x:DataType="viewModels:MainViewModel" Command="{Binding RefreshLocationCommand}" NumberOfTapsRequired="1" />
                </Image.GestureRecognizers>
            </Image>
        </Grid>
    </Shell.TitleView>

    <ContentPage.Content>
        <RefreshView Command="{Binding RefreshLocationCommand}" IsRefreshing="{Binding IsRefreshing}">
            <Grid ColumnDefinitions="*" RowDefinitions="*" HorizontalOptions="Fill" Margin="0" Padding="0" >
                <CollectionView
                    x:Name="PrayersView"
                    HorizontalOptions="Center"
                    ItemsSource="{Binding Prayers}"
                    SelectedItem="{Binding SelectedPrayer, Mode=TwoWay}"
                    SelectionChangedCommand="{Binding PrayerSelectedCommand}"
                    SelectionMode="Single"
                    VerticalOptions="Fill"
                    VerticalScrollBarVisibility="Never">
                    <CollectionView.ItemsLayout>
                        <!-- Reduced ItemSpacing to tighten vertical layout -->
                        <LinearItemsLayout ItemSpacing="4" Orientation="Vertical" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.Header>
                        <StackLayout x:DataType="viewModels:MainViewModel">
                            <!--  Remaining Time Card - Simplified icon ✅  -->
                            <Border
                                Margin="{StaticResource CardMarginList}"
                                Padding="{StaticResource CardPaddingTight}"
                                Style="{StaticResource iOSGlassCard}"
                                HorizontalOptions="Fill">
                                <Grid ColumnDefinitions="Auto,*" ColumnSpacing="{StaticResource SpacingTight}">
                                    <!--  Simplified clock icon  -->
                                    <Label
                                        Grid.Column="0"
                                        FontFamily="{StaticResource IconFontFamily}"
                                        FontSize="22"
                                        Text="&#xf017;"
                                        TextColor="{AppThemeBinding Light={StaticResource Primary50}, Dark={StaticResource Primary40}}"
                                        VerticalOptions="Center"
                                        WidthRequest="44"
                                        HorizontalTextAlignment="Center" />
                                    
                                    <Label
                                        Grid.Column="1"
                                        AutomationProperties.IsInAccessibleTree="True"
                                        Style="{StaticResource BodyLargeStyle}"
                                        Text="{Binding RemainingTime}"
                                        VerticalOptions="Center" />
                                </Grid>
                            </Border>
                        </StackLayout>
                    </CollectionView.Header>

                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="models:Prayer">
                            <ContentView Padding="0" Margin="7,0">
                                <Grid>
                                <!-- ⚡ Performance-Optimized Prayer Card (Phase 5.1 Enhanced) -->
                                <!-- Uses solid colors with strong visual differentiation -->
                                <Border
                                    Style="{StaticResource PrayerCardOptimized}">
                                    <Border.Triggers>
                                        <!-- 🎨 Phase 5.2.4: Glassmorphism matte for past prayers -->
                                        <DataTrigger
                                            Binding="{Binding IsPast}"
                                            TargetType="Border"
                                            Value="True">
                                            <Setter Property="Background" Value="{AppThemeBinding Light={StaticResource PrayerCardPastGradientLight}, Dark={StaticResource PrayerCardPastGradientDark}}" />
                                            <Setter Property="Stroke" Value="{AppThemeBinding Light={StaticResource PrayerCardPastBorderLight}, Dark={StaticResource PrayerCardPastBorderDark}}" />
                                            <Setter Property="Opacity" Value="0.88" />
                                        </DataTrigger>
                                        <!-- 🎨 Phase 5.2.4: Glassmorphism ULTRA GREEN for current prayer -->
                                        <DataTrigger
                                            Binding="{Binding IsActive}"
                                            TargetType="Border"
                                            Value="True">
                                            <Setter Property="Background" Value="{AppThemeBinding Light={StaticResource PrayerCardCurrentGradientLight}, Dark={StaticResource PrayerCardCurrentGradientDark}}" />
                                            <Setter Property="Stroke" Value="{AppThemeBinding Light={StaticResource PrayerCardCurrentBorderLight}, Dark={StaticResource PrayerCardCurrentBorderDark}}" />
                                            <Setter Property="StrokeThickness" Value="2.5" />
                                            <Setter Property="Shadow">
                                                <Shadow Brush="{AppThemeBinding Light={StaticResource PrayerCardCurrentShadowLight}, Dark={StaticResource PrayerCardCurrentShadowDark}}" Radius="6" Offset="0,3" />
                                            </Setter>
                                        </DataTrigger>
                                        <!-- 🎨 Phase 5.2.4: Glassmorphism ULTRA AMBER for upcoming -->
                                        <MultiTrigger TargetType="Border">
                                            <MultiTrigger.Conditions>
                                                <BindingCondition Binding="{Binding IsActive}" Value="False" />
                                                <BindingCondition Binding="{Binding IsPast}" Value="False" />
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="{AppThemeBinding Light={StaticResource PrayerCardUpcomingGradientLight}, Dark={StaticResource PrayerCardUpcomingGradientDark}}" />
                                            <Setter Property="Stroke" Value="{AppThemeBinding Light={StaticResource PrayerCardUpcomingBorderLight}, Dark={StaticResource PrayerCardUpcomingBorderDark}}" />
                                        </MultiTrigger>
                                    </Border.Triggers>

                                    <Grid
                                        ColumnDefinitions="Auto,*,Auto,Auto"
                                        ColumnSpacing="8">

                                        <!-- Animated Prayer Icon -->
                                        <Border
                                            Grid.Column="0"
                                            WidthRequest="40"
                                            HeightRequest="40"
                                            BackgroundColor="Transparent"
                                            Background="{AppThemeBinding Light={StaticResource PrimaryGradientBrush}, Dark={StaticResource SurfaceGlassBrushDark}}"
        									Stroke="{StaticResource GlassStrokeBrush}"
                                            VerticalOptions="Center">
                                            <Image
                                                Source="{Binding IconPath}"
                                                Aspect="AspectFit"
                                                WidthRequest="32"
                                                HeightRequest="32"
                                                VerticalOptions="Center"
                                                HorizontalOptions="Center">
                                                <Image.Triggers>
                                                    <!-- Past prayers: Better visibility in light mode, more subtle in dark mode -->
                                                    <DataTrigger
                                                        Binding="{Binding IsPast}"
                                                        TargetType="Image"
                                                        Value="True">
                                                        <Setter Property="Opacity" Value="{AppThemeBinding Light=0.65, Dark=0.6}" />
                                                    </DataTrigger>
                                                    <!-- Current prayer: Full visibility with enhanced scaling -->
                                                    <DataTrigger
                                                        Binding="{Binding IsActive}"
                                                        TargetType="Image"
                                                        Value="True">
                                                        <Setter Property="Opacity" Value="1.0" />
                                                        <Setter Property="Scale" Value="1.1" />
                                                    </DataTrigger>
                                                    <!-- Upcoming prayers: High visibility in both modes -->
                                                    <MultiTrigger TargetType="Image">
                                                        <MultiTrigger.Conditions>
                                                            <BindingCondition Binding="{Binding IsActive}" Value="False" />
                                                            <BindingCondition Binding="{Binding IsPast}" Value="False" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Opacity" Value="{AppThemeBinding Light=0.95, Dark=0.85}" />
                                                    </MultiTrigger>
                                                </Image.Triggers>
                                            </Image>
                                        </Border>

                                        <!-- Prayer Name with State-Based Colors -->
                                        <Label
                                            Grid.Column="1"
                                            Style="{StaticResource PrayerNameStyle}"
                                            Text="{Binding Name}"
                                            VerticalOptions="Center">
                                            <Label.Triggers>
                                                <DataTrigger
                                                    Binding="{Binding IsPast}"
                                                    TargetType="Label"
                                                    Value="True">
                                                    <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource PrayerPastTextColor}, Dark={StaticResource PrayerPastTextColorDark}}" />
                                                </DataTrigger>
                                                <DataTrigger
                                                    Binding="{Binding IsActive}"
                                                    TargetType="Label"
                                                    Value="True">
                                                    <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource PrayerActiveTextColor}, Dark={StaticResource PrayerActiveTextColorDark}}" />
                                                    <Setter Property="FontAttributes" Value="Bold" />
                                                </DataTrigger>
                                                <MultiTrigger TargetType="Label">
                                                    <MultiTrigger.Conditions>
                                                        <BindingCondition Binding="{Binding IsActive}" Value="False" />
                                                        <BindingCondition Binding="{Binding IsPast}" Value="False" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource PrayerUpcomingTextColor}, Dark={StaticResource PrayerUpcomingTextColorDark}}" />
                                                </MultiTrigger>
                                            </Label.Triggers>
                                        </Label>

                                        <!-- Prayer Time with State-Based Colors -->
                                        <Label
                                            Grid.Column="2"
                                            HorizontalTextAlignment="End"
                                            Style="{StaticResource PrayerTimeStyle}"
                                            Text="{Binding Time}"
                                            VerticalOptions="Center">
                                            <Label.Triggers>
                                                <DataTrigger
                                                    Binding="{Binding IsPast}"
                                                    TargetType="Label"
                                                    Value="True">
                                                    <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource PrayerPastTextColor}, Dark={StaticResource PrayerPastTextColorDark}}" />
                                                </DataTrigger>
                                                <DataTrigger
                                                    Binding="{Binding IsActive}"
                                                    TargetType="Label"
                                                    Value="True">
                                                    <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource PrayerActiveTextColor}, Dark={StaticResource PrayerActiveTextColorDark}}" />
                                                    <Setter Property="FontAttributes" Value="Bold" />
                                                </DataTrigger>
                                                <MultiTrigger TargetType="Label">
                                                    <MultiTrigger.Conditions>
                                                        <BindingCondition Binding="{Binding IsActive}" Value="False" />
                                                        <BindingCondition Binding="{Binding IsPast}" Value="False" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource PrayerUpcomingTextColor}, Dark={StaticResource PrayerUpcomingTextColorDark}}" />
                                                </MultiTrigger>
                                            </Label.Triggers>
                                        </Label>

                                        <!-- Enhanced Notification Bell with Better Visual Distinction -->
                                        <Border
                                            Grid.Column="3"
                                            BackgroundColor="Transparent"
                                            Background="{AppThemeBinding Light={StaticResource SurfaceGlassBrushLight}, Dark={StaticResource SurfaceGlassBrushDark}}"
        									Stroke="{StaticResource GlassStrokeBrush}"
                                            StrokeThickness="0.75"
                                            StrokeShape="RoundRectangle 16"
                                            WidthRequest="36"
                                            HeightRequest="36"
                                            VerticalOptions="Center">
                                            <Label
                                                AutomationProperties.IsInAccessibleTree="True"
                                                FontFamily="{StaticResource IconFontFamily}"
                                                FontSize="{DynamicResource IconMediumFontSize}"
                                                HorizontalOptions="Center"
                                                VerticalOptions="Center"
                                                Text="&#xe7f6;"
                                                TextColor="{AppThemeBinding Light={StaticResource HighContrastOnSurface}, Dark={StaticResource HighContrastOnSurfaceDark}}">
                                                <Label.Triggers>
                                                    <DataTrigger
                                                        Binding="{Binding Enabled}"
                                                        TargetType="Label"
                                                        Value="False">
                                                        <Setter Property="Text" Value="&#xf1f6;" />
                                                        <Setter Property="SemanticProperties.Description" Value="{localization:Translate DevreDisi}" />
                                                        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource HighContrastOutline}, Dark={StaticResource HighContrastOutlineDark}}" />
                                                        <Setter Property="Opacity" Value="0.6" />
                                                    </DataTrigger>
                                                    <DataTrigger
                                                        Binding="{Binding Enabled}"
                                                        TargetType="Label"
                                                        Value="True">
                                                        <Setter Property="Text" Value="&#xf0f3;" />
                                                        <Setter Property="SemanticProperties.Description" Value="{localization:Translate Etkin}" />
                                                        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Success60}, Dark={StaticResource Success30}}" />
                                                        <Setter Property="Opacity" Value="1.0" />
                                                    </DataTrigger>
                                                </Label.Triggers>
                                            </Label>
                                            <Border.GestureRecognizers>
                                                <TapGestureRecognizer x:DataType="models:Prayer"
                                                    Command="{Binding NavigateCommand}" />
                                            </Border.GestureRecognizers>
                                            <Border.Triggers>
                                                <DataTrigger
                                                    Binding="{Binding Enabled}"
                                                    TargetType="Border"
                                                    Value="True">
                                                    <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Success10}, Dark={StaticResource Success95}}" />
                                                    <Setter Property="Stroke" Value="{AppThemeBinding Light={StaticResource Success40}, Dark={StaticResource Success60}}" />
                                                    <Setter Property="StrokeThickness" Value="1.25" />
                                                </DataTrigger>
                                                <DataTrigger
                                                    Binding="{Binding Enabled}"
                                                    TargetType="Border"
                                                    Value="False">
                                                    <Setter Property="Stroke" Value="{StaticResource GlassStrokeBrush}" />
                                                    <Setter Property="StrokeThickness" Value="0.75" />
                                                </DataTrigger>
                                            </Border.Triggers>
                                        </Border>
                                    </Grid>
                                </Border></Grid>
                            </ContentView>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>

                    <CollectionView.Footer>
                        <StackLayout x:DataType="viewModels:MainViewModel" Orientation="Vertical" Spacing="{StaticResource SpacingTight}" Margin="0,4,0,4">
                            <!--  Monthly Calendar Button - 8px grid spacing ✅  -->
                            <Button
                                Margin="32,0,32,0"
                                Style="{StaticResource GlassButtonPillSecondary}"
                                Text="{localization:Translate AylikTakvim}"
                                Command="{Binding GoToMonthCommand}"
                                HorizontalOptions="Fill"
                                IsEnabled="{Binding IsNotBusy}">
                                <Button.ImageSource>
                                    <FontImageSource
                                        FontFamily="{StaticResource IconFontFamily}"
                                        Glyph="&#xf073;"
                                        Size="{DynamicResource IconMediumSize}"
                                        Color="{AppThemeBinding Light={StaticResource Primary95}, Dark={StaticResource Primary10}}" />
                                </Button.ImageSource>
                            </Button>

                            <!--  City Location Card - 8px grid spacing ✅  -->
                            <Border
                                Margin="32,0,32,8"
                                HorizontalOptions="Fill"
                                IsEnabled="{Binding IsNotBusy}"
                                Style="{StaticResource LocationCard}">
                                <Label
                                    Margin="3,0"
                                    Padding="3"
                                    x:DataType="viewModels:MainViewModel"
                                    AutomationProperties.IsInAccessibleTree="True"
                                    HorizontalOptions="Center"
                                    SemanticProperties.Description="{localization:Translate Sehir}"
                                    Style="{StaticResource LocationStyle}"
                                    VerticalTextAlignment="Center">
                                    <Label.FormattedText>
                                        <FormattedString>
                                            <Span
                                                FontFamily="{StaticResource IconFontFamily}"
                                                FontSize="{DynamicResource SubHeaderFontSize}"
                                                Text="&#xf3c5; " />
                                            <Span Text="{Binding City}" TextTransform="Uppercase" />
                                        </FormattedString>
                                    </Label.FormattedText>
                                </Label>
                                <Border.GestureRecognizers>
                                    <TapGestureRecognizer Command="{Binding GoToMapCommand}" NumberOfTapsRequired="1" />
                                </Border.GestureRecognizers>
                            </Border>
                        </StackLayout>
                    </CollectionView.Footer>
                </CollectionView>

                <!-- Long running overlay (location refresh) -->
                <Grid IsVisible="{Binding ShowOverlay}" BackgroundColor="#80000000">
                    <Border Style="{StaticResource GlassCardSoft}" Padding="32,20" HorizontalOptions="Center" VerticalOptions="Center">
                        <VerticalStackLayout Spacing="12" HorizontalOptions="Center">
                            <ActivityIndicator IsRunning="True" Color="{StaticResource PrimaryColor}" WidthRequest="40" HeightRequest="40" />
                            <Label Text="{Binding OverlayMessage}" Style="{StaticResource BodyLargeStyle}" HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>
                </Grid>
            </Grid>
        </RefreshView>
    </ContentPage.Content>
</ContentPage>
